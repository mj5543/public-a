{"version":3,"file":"src_components_lib_material-ui_DataCrudGrid_js.48a3bc6f72848eddcbb0.js","mappings":"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","sources":["webpack://lalalol_build/./src/components/lib/material-ui/DataCrudGrid.js"],"sourcesContent":["import React, {useCallback, useState} from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CancelIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {\r\n  DataGrid,\r\n  GridToolbarContainer,\r\n  GridToolbar,\r\n  useGridSlotComponentProps,\r\n} from '@mui/x-data-grid';\r\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\r\nimport {RefreshingLoader} from '../../ui/progress/LoaderSample';\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nconst useStyles = makeStyles(\r\n  (theme) => ({\r\n    actions: {\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    textPrimary: {\r\n      color: theme.palette.text.primary,\r\n    },\r\n    floatLeft: {\r\n      float: 'left'\r\n    },\r\n    floatRight: {\r\n      float: 'right'\r\n    },\r\n  }),\r\n  { defaultTheme },\r\n);\r\n\r\nfunction LoadingBar() {\r\n  return (\r\n    <RefreshingLoader isShow={true} />\r\n  )\r\n}\r\nfunction NoData() {\r\n  return (\r\n    <div>데이터가 없습니다.</div>\r\n  )\r\n}\r\n\r\nfunction EditToolbar() {\r\n  const compProps = useGridSlotComponentProps();\r\n\r\n  const handleClick = () => {\r\n    const rowModels = compProps.apiRef.current.getRowModels()\r\n    const lastModel = rowModels.get(rowModels.size);\r\n    const id = lastModel.id + 1;\r\n    console.log('rowModels--', rowModels)\r\n    // const id = 2;\r\n    // compProps.apiRef.current.setEditRowsModel([{ id, isNew: true }]);\r\n    compProps.apiRef.current.setRows([...compProps.rows, { id, isNew: true }]);\r\n    compProps.apiRef.current.setRowMode(id, 'edit');\r\n    // Wait for the grid to render with the new row\r\n    setTimeout(() => {\r\n      compProps.apiRef.current.scrollToIndexes({\r\n        rowIndex: compProps.apiRef.current.getRowsCount() - 1,\r\n      });\r\n      compProps.apiRef.current.setCellFocus(id, 'username');\r\n    }, 150);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <GridToolbarContainer className={classes.floatRight}>\r\n      <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\r\n        Add record\r\n      </Button>\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\nfunction CustomToolbar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <GridToolbar className={classes.floatLeft} />\r\n      <EditToolbar />\r\n    </div>\r\n  )\r\n}\r\nfunction EditIconAction(props) {\r\n  // let id;\r\n  // compProps.apiRef.current.getSelectedRows().forEach((value, key) => {\r\n  //   id = key\r\n  // })\r\n  const handleEditClick = (event) => {\r\n    const id = Number(event.currentTarget.id);\r\n    props.apiRef.current.setRowMode(id, 'edit');\r\n    // Wait for the grid to render with the new row\r\n    setTimeout(() => {\r\n      props.apiRef.current.scrollToIndexes({\r\n        rowIndex: props.apiRef.current.getRowsCount() - 1,\r\n      });\r\n\r\n      props.apiRef.current.setCellFocus(id, 'username');\r\n    }, 150);\r\n  };\r\n  const handleDeleteClick = (event) => {\r\n    const id = Number(event.currentTarget.id);\r\n    props.apiRef.current.updateRows([{ id, _action: 'delete' }]);\r\n  };\r\n  return [\r\n    <IconButton\r\n      children={<EditIcon />}\r\n      label=\"Edit\"\r\n      id={props.id}\r\n      onClick={handleEditClick}\r\n      color=\"inherit\"\r\n    />,\r\n    <IconButton\r\n      children={<DeleteIcon />}\r\n      label=\"Delete\"\r\n      id={props.id}\r\n      onClick={handleDeleteClick}\r\n      color=\"inherit\"\r\n    />,\r\n  ]\r\n}\r\nfunction SaveIconAction(props) {\r\n  // let id;\r\n  // compProps.apiRef.current.getSelectedRows().forEach((value, key) => {\r\n  //   id = key\r\n  // })\r\n  const handleSaveClick = (event) => {\r\n    const id = Number(event.currentTarget.id);\r\n    props.apiRef.current.commitRowChange(id);\r\n    props.apiRef.current.setRowMode(id, 'view');\r\n\r\n    const row = props.apiRef.current.getRow(id);\r\n    props.apiRef.current.updateRows([{ ...row, isNew: false }]);\r\n    setTimeout(() => {\r\n      const rowData = props.apiRef.current.getRow(id)\r\n      props.onSelectedChagenItemCB(rowData)\r\n      console.log('saveRow', rowData)\r\n    })\r\n  };\r\n  const handleCancelClick = (event) => {\r\n    const id = Number(event.currentTarget.id);\r\n    props.apiRef.current.setRowMode(id, 'view');\r\n\r\n    const row = props.apiRef.current.getRow(id);\r\n    if (row.isNew) {\r\n      props.apiRef.current.updateRows([{ id, _action: 'delete' }]);\r\n    } else {\r\n      const preItem = props.dataList.find(d => d.id === id);\r\n      props.apiRef.current.updateRows([{ ...preItem}]);\r\n    }\r\n  };\r\n  return [\r\n    <IconButton\r\n      children={<SaveIcon />}\r\n      id={props.id}\r\n      label=\"Save\"\r\n      onClick={handleSaveClick}\r\n      color=\"primary\"\r\n    />,\r\n    <IconButton\r\n      children={<CancelIcon />}\r\n      id={props.id}\r\n      label=\"Cancel\"\r\n      onClick={handleCancelClick}\r\n      color=\"inherit\"\r\n    />,\r\n  ]\r\n}\r\nfunction ActionIcons(props) {\r\n  const compProps = useGridSlotComponentProps();\r\n  console.log('ActionIcons--', props)\r\n  const isInEditMode = compProps.apiRef.current.getRowMode(props.id) === 'edit';\r\n  // const editKey = `edit${props.id}`\r\n  if(isInEditMode) {\r\n    return <SaveIconAction {...props} apiRef={compProps.apiRef} />\r\n  } else {\r\n    return <EditIconAction {...props} apiRef={compProps.apiRef} />\r\n  }\r\n}\r\n// EditToolbar.propTypes = {\r\n//   apiRef: PropTypes.shape({\r\n//     current: PropTypes.object.isRequired,\r\n//   }).isRequired,\r\n//   selectedCellParams: PropTypes.any,\r\n// };\r\n\r\nexport default function FullFeaturedCrudGrid(props) {\r\n  const classes = useStyles();\r\n  // const apiRef = useGridApiRef();\r\n  // const {rowParams} = GridRowParams;\r\n\r\n  const handleRowEditStart = (params, event) => {\r\n    event.defaultMuiPrevented = true;\r\n  };\r\n\r\n  const handleRowEditStop = (params, event) => {\r\n    event.defaultMuiPrevented = true;\r\n  };\r\n\r\n  const rows = props.dataList;\r\n  const [editRowsModel, setEditRowsModel] = useState({});\r\n  const handleCellEditChange = useCallback(\r\n    (newModel) => {\r\n      const updatedModel = { ...newModel };\r\n      // const [firstName, lastName] = value.toString().split(' ');\r\n      const updatedRows = rows.map((row) => {\r\n        // if (row.id === id) {\r\n        //   return { ...row, firstName, lastName };\r\n        // }\r\n        return row;\r\n      });\r\n      setEditRowsModel(updatedModel);\r\n      // setRows(updatedRows);\r\n      // if (field === 'fullName') {\r\n      //   const [firstName, lastName] = value.toString().split(' ');\r\n      //   const updatedRows = rows.map((row) => {\r\n      //     if (row.id === id) {\r\n      //       return { ...row, firstName, lastName };\r\n      //     }\r\n      //     return row;\r\n      //   });\r\n      //   setRows(updatedRows);\r\n      // }\r\n    },\r\n    [],\r\n  );\r\n  const columns = [\r\n    ...props.columns,\r\n    {\r\n      field: 'actions',\r\n      type: 'actions',\r\n      headerName: 'Actions',\r\n      width: 100,\r\n      cellClassName: classes.actions,\r\n      disableClickEventBubbling: true,\r\n      renderCell: (params) => {\r\n        console.log('renderCell--', params)\r\n        return <ActionIcons {...params} {...props} />\r\n      },\r\n      // getActions: (params) => {\r\n      //   console.log('getActions--', params)\r\n      //   return <ActionIcons key={params.id} {...params} {...props} />\r\n      // }\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ height: 500, width: '100%' }}>\r\n      <RefreshingLoader isShow={props.isLoading} />\r\n      {!props.isLoading && \r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        editMode=\"row\"\r\n        rowHeight={30}\r\n        editRowsModel={editRowsModel}\r\n        onEditRowsModelChange={handleCellEditChange}\r\n        onRowEditStart={handleRowEditStart}\r\n        onRowEditStop={handleRowEditStop}\r\n        components={{\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: LoadingBar,\r\n          NoRowsOverlay: NoData\r\n        }}\r\n        // componentsProps={{\r\n        //   toolbar: { apiRef },\r\n        // }}\r\n      />\r\n      }\r\n      {/* <div>\r\n         {JSON.stringify(rows)}\r\n    </div> */}\r\n    </div>\r\n\r\n  );\r\n}\r\n"],"names":["React","useCallback","useState","Button","AddIcon","EditIcon","DeleteIcon","SaveIcon","CancelIcon","IconButton","DataGrid","GridToolbarContainer","GridToolbar","useGridSlotComponentProps","createTheme","makeStyles","RefreshingLoader","defaultTheme","useStyles","theme","actions","color","palette","text","secondary","textPrimary","primary","floatLeft","float","floatRight","LoadingBar","createElement","isShow","NoData","EditToolbar","compProps","handleClick","rowModels","apiRef","current","getRowModels","lastModel","get","size","id","console","log","setRows","rows","isNew","setRowMode","setTimeout","scrollToIndexes","rowIndex","getRowsCount","setCellFocus","classes","className","startIcon","onClick","CustomToolbar","EditIconAction","props","handleEditClick","event","Number","currentTarget","handleDeleteClick","updateRows","_action","children","label","SaveIconAction","handleSaveClick","commitRowChange","row","getRow","rowData","onSelectedChagenItemCB","handleCancelClick","preItem","dataList","find","d","ActionIcons","isInEditMode","getRowMode","_extends","FullFeaturedCrudGrid","handleRowEditStart","params","defaultMuiPrevented","handleRowEditStop","editRowsModel","setEditRowsModel","handleCellEditChange","newModel","updatedModel","updatedRows","map","columns","field","type","headerName","width","cellClassName","disableClickEventBubbling","renderCell","style","height","isLoading","editMode","rowHeight","onEditRowsModelChange","onRowEditStart","onRowEditStop","components","Toolbar","LoadingOverlay","NoRowsOverlay"],"sourceRoot":""}